import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/foundation.dart';
import 'package:aura_one/database/journal_database.dart';
import 'package:aura_one/database/dev_seed_data.dart';
import 'package:drift/native.dart';

// Test database setup
JournalDatabase createTestDatabase() {
  return JournalDatabase.forTesting(NativeDatabase.memory());
}

// Extension to allow testing constructor
extension TestJournalDatabase on JournalDatabase {
  static JournalDatabase forTesting(QueryExecutor executor) {
    return JournalDatabase()..database = executor as dynamic;
  }
}

void main() {
  group('DevSeedData', () {
    late JournalDatabase testDb;

    setUp(() {
      testDb = createTestDatabase();
    });

    tearDown(() async {
      await testDb.close();
    });

    test('shouldSeedDatabase returns false in release mode', () async {
      // This test would need to mock kDebugMode, which is complex
      // In practice, the seeding code won't run in release builds
      // So this is primarily for documentation
      expect(true, true); // Placeholder
    });

    test('shouldSeedDatabase returns true when database is empty', () async {
      if (kDebugMode) {
        final shouldSeed = await DevSeedData.shouldSeedDatabase(testDb);
        expect(shouldSeed, true);
      }
    });

    test('shouldSeedDatabase returns false when database has entries', () async {
      if (kDebugMode) {
        // Add a few entries
        for (int i = 0; i < 6; i++) {
          await testDb.insertJournalEntry(
            JournalEntriesCompanion.insert(
              date: DateTime.now().subtract(Duration(days: i)),
              title: 'Test Entry $i',
              content: 'Test content',
            ),
          );
        }

        final shouldSeed = await DevSeedData.shouldSeedDatabase(testDb);
        expect(shouldSeed, false);
      }
    });

    test('seedDatabase creates 60 days of entries', () async {
      if (kDebugMode) {
        await DevSeedData.seedDatabase(testDb);

        final stats = await testDb.getJournalStatistics();
        expect(stats['total_entries'], 60);
        expect(stats['auto_generated'], 60);
        expect(stats['user_edited'], 0);

        // Check date range
        final now = DateTime.now();
        final startDate = now.subtract(const Duration(days: 60));
        final entries = await testDb.getJournalEntriesBetween(
          startDate,
          now,
        );

        expect(entries.length, 60);

        // Verify each entry has content
        for (final entry in entries) {
          expect(entry.title.isNotEmpty, true);
          expect(entry.content.isNotEmpty, true);
          expect(entry.isAutoGenerated, true);
          expect(entry.isEdited, false);
        }
      }
    });

    test('seeded entries have diverse content', () async {
      if (kDebugMode) {
        await DevSeedData.seedDatabase(testDb);

        final entries = await testDb.getJournalEntriesBetween(
          DateTime.now().subtract(const Duration(days: 10)),
          DateTime.now(),
        );

        // Check for variety in moods
        final moods = entries
            .where((e) => e.mood != null)
            .map((e) => e.mood)
            .toSet();
        expect(moods.length, greaterThan(1));

        // Check for variety in titles
        final titles = entries.map((e) => e.title).toSet();
        expect(titles.length, greaterThan(5));
      }
    });

    test('seeded entries have activities', () async {
      if (kDebugMode) {
        await DevSeedData.seedDatabase(testDb);

        final entry = await testDb.getLatestJournalEntry();
        expect(entry, isNotNull);

        final activities = await testDb.getActivitiesForEntry(entry!.id);
        expect(activities.length, greaterThanOrEqualTo(3));
        expect(activities.length, lessThanOrEqualTo(8));

        // Check activity types
        final types = activities.map((a) => a.activityType).toSet();
        expect(types.length, greaterThan(1));
      }
    });
  });
}