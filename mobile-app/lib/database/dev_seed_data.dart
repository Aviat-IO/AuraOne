import 'dart:math';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:drift/drift.dart';
import 'journal_database.dart';
import '../utils/logger.dart';

/// Development-only database seeder for testing purposes
/// This class will NOT be included in production builds
class DevSeedData {
  static final _random = Random();

  // Sample data for generating realistic entries
  static const _moods = ['üòä Happy', 'üòî Sad', 'üòå Calm', 'üò§ Frustrated', 'üòÉ Excited', 'üò¥ Tired', 'ü§î Thoughtful', 'üòÅ Joyful', 'üò∞ Anxious', 'üòé Confident'];

  static const _locations = [
    'Central Park', 'Downtown Coffee Shop', 'Home Office', 'Gym',
    'Grocery Store', 'Work', 'Beach', 'Library', 'Restaurant',
    'Friend\'s House', 'Movie Theater', 'Shopping Mall', 'Doctor\'s Office',
    'Airport', 'Train Station', 'Museum', 'Art Gallery', 'Concert Hall'
  ];

  static const _activities = [
    'morning meditation', 'workout session', 'team meeting', 'lunch with friends',
    'grocery shopping', 'evening walk', 'reading', 'watching movie',
    'cooking dinner', 'video call with family', 'project work', 'cleaning',
    'yoga practice', 'journaling', 'learning new skill', 'listening to podcast'
  ];

  static const _weatherConditions = [
    'sunny and warm', 'partly cloudy', 'overcast', 'light rain',
    'heavy rain', 'windy', 'cold and crisp', 'foggy morning', 'perfect weather'
  ];

  static const _tags = [
    ['work', 'productive'], ['exercise', 'health'], ['social', 'friends'],
    ['family', 'love'], ['self-care', 'wellness'], ['creative', 'art'],
    ['learning', 'growth'], ['relaxation', 'rest'], ['adventure', 'travel'],
    ['milestone', 'achievement'], ['reflection', 'mindfulness']
  ];

  /// Check if database needs seeding (only in debug mode)
  static Future<bool> shouldSeedDatabase(JournalDatabase db) async {
    if (!kDebugMode) {
      return false; // Never seed in production
    }

    // Check if we already have entries
    final stats = await db.getJournalStatistics();
    final totalEntries = stats['total_entries'] ?? 0;

    // Only seed if database is empty or has very few entries
    return totalEntries < 5;
  }

  /// Seed the database with 60 days of fake journal entries
  static Future<void> seedDatabase(JournalDatabase db) async {
    if (!kDebugMode) {
      appLogger.warning('Attempted to seed database in release mode - aborting');
      return;
    }

    appLogger.info('Starting development database seeding...');

    final now = DateTime.now();
    final startDate = now.subtract(const Duration(days: 60));

    for (int i = 0; i < 60; i++) {
      final entryDate = startDate.add(Duration(days: i));
      final dateOnly = DateTime(entryDate.year, entryDate.month, entryDate.day);

      // Skip if entry already exists for this date
      final existing = await db.getJournalEntryForDate(dateOnly);
      if (existing != null) {
        continue;
      }

      // Generate entry content
      final content = _generateJournalContent(entryDate);
      final mood = _moods[_random.nextInt(_moods.length)];
      final tagSet = _tags[_random.nextInt(_tags.length)];
      final summary = _generateSummary(entryDate);
      final title = _generateTitle(entryDate);

      // Create journal entry
      final entryId = await db.insertJournalEntry(
        JournalEntriesCompanion.insert(
          date: dateOnly,
          title: title,
          content: content,
          mood: Value(mood),
          tags: Value(jsonEncode(tagSet)),
          summary: Value(summary),
          isAutoGenerated: const Value(true),
          isEdited: const Value(false),
          createdAt: Value(entryDate),
          updatedAt: Value(entryDate),
        ),
      );

      // Add 3-8 activities for each day
      final activityCount = _random.nextInt(6) + 3;
      for (int j = 0; j < activityCount; j++) {
        await _addActivity(db, entryId, entryDate, j);
      }

      if (i % 10 == 0) {
        appLogger.debug('Seeded ${i + 1} days of journal entries...');
      }
    }

    appLogger.info('‚úÖ Database seeding complete - added 60 days of test data');
  }

  static String _generateTitle(DateTime date) {
    final dayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
    final themes = [
      'A Day of Discovery', 'Productive Hours', 'Finding Balance',
      'New Perspectives', 'Small Victories', 'Moments of Joy',
      'Challenges and Growth', 'Simple Pleasures', 'Making Progress'
    ];

    final weekday = dayNames[date.weekday - 1];
    final theme = themes[_random.nextInt(themes.length)];

    return '$weekday: $theme';
  }

  static String _generateJournalContent(DateTime date) {
    final weather = _weatherConditions[_random.nextInt(_weatherConditions.length)];
    final morning = _activities[_random.nextInt(_activities.length)];
    final afternoon = _activities[_random.nextInt(_activities.length)];
    final evening = _activities[_random.nextInt(_activities.length)];

    final reflections = [
      'Today was quite productive and I feel accomplished.',
      'I\'m grateful for the small moments that made today special.',
      'Faced some challenges but learned valuable lessons.',
      'Feeling energized and ready for tomorrow.',
      'Taking time to appreciate how far I\'ve come.',
      'Sometimes the simple days are the best ones.',
      'Made good progress on my goals today.',
      'Connecting with people made this day memorable.',
    ];

    final reflection = reflections[_random.nextInt(reflections.length)];

    return '''
Woke up to $weather. Started the day with $morning which set a positive tone.

The morning was spent working on various tasks and staying focused. Had a good rhythm going and managed to check off several items from my to-do list.

Around noon, took a break for $afternoon. It was exactly what I needed to recharge and refocus for the rest of the day.

The afternoon brought some interesting conversations and new ideas. I'm starting to see progress in areas I've been working on consistently.

Evening was relaxing with $evening. It's important to wind down properly and prepare for tomorrow.

$reflection

Looking forward to what tomorrow brings!
''';
  }

  static String _generateSummary(DateTime date) {
    final summaries = [
      'A productive day with good progress on personal and professional goals. Maintained healthy habits and enjoyed quality time.',
      'Balanced work and relaxation effectively. Made meaningful connections and learned something new.',
      'Focused on wellness and self-care. Completed important tasks while maintaining a positive mindset.',
      'Challenging but rewarding day. Overcame obstacles and ended on a high note.',
      'Peaceful and reflective day. Took time to appreciate the present moment and plan for the future.',
      'Active and energetic day. Stayed motivated and accomplished more than expected.',
      'Creative and inspiring day. Found new solutions and explored interesting ideas.',
      'Social and engaging day. Strengthened relationships and enjoyed community connections.',
    ];

    return summaries[_random.nextInt(summaries.length)];
  }

  static Future<void> _addActivity(
    JournalDatabase db,
    int entryId,
    DateTime date,
    int activityIndex,
  ) async {
    final hour = 6 + (activityIndex * 2) + _random.nextInt(2);
    final minute = _random.nextInt(60);
    final timestamp = DateTime(date.year, date.month, date.day, hour, minute);

    final activityTypes = ['location', 'photo', 'movement', 'calendar', 'manual'];
    final type = activityTypes[_random.nextInt(activityTypes.length)];

    String description;
    Map<String, dynamic> metadata;

    switch (type) {
      case 'location':
        final location = _locations[_random.nextInt(_locations.length)];
        description = 'Visited $location';
        metadata = {
          'place': location,
          'duration': '${_random.nextInt(120) + 30} minutes',
          'lat': 40.7128 + (_random.nextDouble() - 0.5) * 0.1,
          'lng': -74.0060 + (_random.nextDouble() - 0.5) * 0.1,
        };
        break;

      case 'photo':
        description = 'Captured a moment';
        metadata = {
          'count': _random.nextInt(5) + 1,
          'type': ['landscape', 'portrait', 'food', 'selfie', 'group'][_random.nextInt(5)],
        };
        break;

      case 'movement':
        final steps = (_random.nextInt(5000) + 2000);
        description = 'Walked $steps steps';
        metadata = {
          'steps': steps,
          'distance': '${(steps * 0.0008).toStringAsFixed(1)} km',
          'calories': steps ~/ 20,
        };
        break;

      case 'calendar':
        final events = ['Team meeting', 'Doctor appointment', 'Lunch date', 'Gym class', 'Project deadline'];
        final event = events[_random.nextInt(events.length)];
        description = event;
        metadata = {
          'event': event,
          'duration': '${_random.nextInt(90) + 30} minutes',
        };
        break;

      default:
        final activity = _activities[_random.nextInt(_activities.length)];
        description = 'Did $activity';
        metadata = {
          'activity': activity,
          'note': 'Manually added activity',
        };
    }

    await db.insertJournalActivity(
      JournalActivitiesCompanion.insert(
        journalEntryId: entryId,
        activityType: type,
        description: description,
        metadata: Value(jsonEncode(metadata)),
        timestamp: timestamp,
        createdAt: Value(timestamp),
      ),
    );
  }
}