# Task ID: 5
# Title: Calendar and System Integration
# Status: pending
# Dependencies: 2
# Priority: medium
# Description: Implement automatic import of calendar events and system activities
# Details:
Integrate with platform-specific calendar APIs (EventKit on iOS, Calendar Provider on Android) to automatically import daily appointments and events. Implement CalendarService to sync calendar data while respecting user privacy. Add integration with HealthKit (iOS) and Google Fit (Android) for fitness and health data. Implement Bluetooth Low Energy scanning using flutter_blue_plus for proximity detection. Store all integrated data locally with proper attribution to source apps.

# Test Strategy:
Test calendar permission flows and data import accuracy. Verify health data integration across platforms. Test BLE scanning and proximity detection. Validate data attribution and source tracking.

# Subtasks:
## 1. Implement iOS EventKit integration [pending]
### Dependencies: None
### Description: Add EventKit framework integration for iOS to access calendar events with proper permissions
### Details:
Create iOS-specific calendar service using EventKit framework. Implement permission request flow for calendar access. Add methods to fetch calendar events with date range filtering. Handle event parsing and conversion to app models. Ensure proper error handling for permission denials.

## 2. Implement Android Calendar Provider integration [pending]
### Dependencies: None
### Description: Add Android Calendar Provider integration to access calendar events with proper permissions
### Details:
Create Android-specific calendar service using Calendar Provider API. Implement permission request flow for calendar read access. Add methods to query calendar events from all user calendars. Handle event parsing and conversion to app models. Ensure proper error handling for permission denials.

## 3. Add HealthKit integration (iOS) [pending]
### Dependencies: None
### Description: Integrate with iOS HealthKit for fitness and health data import
### Details:
Implement HealthKit integration for iOS using health package. Request permissions for relevant health data types (steps, workouts, heart rate). Create methods to fetch daily health summaries. Convert health data to app models with proper attribution. Handle privacy permissions and data access restrictions.

## 4. Add Google Fit integration (Android) [pending]
### Dependencies: None
### Description: Integrate with Google Fit API for Android fitness and health data
### Details:
Implement Google Fit integration using fitness package or direct API calls. Set up Google Fit API credentials and permissions. Create methods to fetch daily fitness data (steps, activities, locations). Convert fitness data to app models with proper source attribution. Handle OAuth flow and API rate limits.

## 5. Implement BLE scanning with flutter_blue_plus [pending]
### Dependencies: None
### Description: Add Bluetooth Low Energy scanning for proximity detection and device tracking
### Details:
Integrate flutter_blue_plus for BLE functionality. Implement background BLE scanning with proper permission handling. Add device discovery and proximity detection logic. Store discovered devices with timestamps and signal strength. Implement battery-efficient scanning intervals and filters.

## 6. Create CalendarService with privacy controls [pending]
### Dependencies: 5.1, 5.2
### Description: Implement unified calendar service with privacy settings and data management
### Details:
Create CalendarService class that abstracts platform-specific implementations. Add privacy controls for calendar data sync (enable/disable, selective calendar access). Implement data sync scheduling and background refresh. Add user preferences for sync frequency and data retention. Ensure local-only storage with optional cloud backup.

## 7. Handle data attribution and source tracking [pending]
### Dependencies: 5.3, 5.4, 5.5, 5.6
### Description: Implement comprehensive source attribution system for all integrated data
### Details:
Create data attribution system that tracks source applications and APIs for all imported data. Implement metadata fields for calendar events, health data, and BLE discoveries. Add source-specific icons and labels in UI. Create data management interface for users to control which sources are active. Implement data cleanup and source removal functionality.

