# Task ID: 31
# Title: Replace photo provider placeholders with real implementations
# Status: pending
# Dependencies: 2, 3, 26
# Priority: medium
# Description: Replace the hardcoded picsum.photos placeholder URLs in MediaGalleryWidget's mediaItemsProvider with actual photo service integration using existing PhotoService and MediaDatabase infrastructure.
# Details:
Remove the mock data in the mediaItemsProvider (lines 13-65 in media_gallery_widget.dart) which currently returns hardcoded MediaItem objects with picsum.photos URLs and placeholder captions. Replace this with real implementation that: 1) Integrates with the existing PhotoService from photo_service_provider.dart to access device media through the photo_manager package, 2) Queries the MediaDatabase via mediaItemsProvider from media_database_provider.dart to fetch actual photos and videos for the specified date, 3) Creates a mapping function to convert MediaItem database records and AssetEntity objects to the MediaItem model used by the widget, 4) Maintains the same provider interface but returns real device photos filtered by the selected date, 5) Uses actual thumbnails from PhotoService.getThumbnail() instead of placeholder URLs, 6) Populates captions and metadata from stored media metadata in the database, 7) Handles permission states properly by checking PhotoService.hasAccess before querying media, 8) Implements proper error handling for cases where photo access is denied or media files are unavailable. The implementation should preserve the existing MediaItem model structure and widget functionality while replacing placeholder data with real photo library integration.

# Test Strategy:
Verify that placeholder picsum.photos URLs no longer appear in the media gallery. Test media gallery displays real photos and videos from the device photo library when photo permissions are granted. Test proper date filtering shows only media items from the selected date. Verify thumbnail generation works correctly using PhotoService methods. Test error handling displays appropriate messages when photo permissions are denied. Verify loading states work properly while scanning device media. Test that media metadata and captions are populated from stored database records when available.
