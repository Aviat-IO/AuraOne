# Task ID: 28
# Title: Replace mock map with real map integration using flutter_map and GPS data
# Status: done
# Dependencies: 3, 2
# Priority: medium
# Description: Replace the placeholder map UI in MapWidget with a real interactive map using flutter_map package and integrate with existing location database to display actual GPS tracking data and location points.
# Details:
Replace the mock placeholder Container (lines 100-133 in map_widget.dart) with a real FlutterMap widget following the working implementation pattern found in home_screen.dart (lines 801-856). The implementation should: 1) Replace the placeholder Container with a FlutterMap widget configured with MapOptions for initial center/zoom and OpenStreetMap TileLayer using urlTemplate 'https://tile.openstreetmap.org/{z}/{x}/{y}.png', 2) Integrate with existing LocationDatabase via locationDatabaseProvider to query LocationPoints for the selected date, 3) Add PolylineLayer to connect consecutive location points showing movement paths with theme.colorScheme.primary color and 3.0 strokeWidth, 4) Add MarkerLayer with custom markers for different activity types (green circle with play icon for start, red circle with stop icon for end, following the pattern in home_screen.dart lines 822-851), 5) Implement the TODO map control functionalities: zoom in/out (lines 144-155) using MapController.move() and center on current location (lines 158-163) using MapController.move() with user's current position, 6) Update the location card tap handler (around line 428) to center the map on the selected location using MapController.move(), 7) Calculate real distance using the existing Haversine formula implementation from home_screen.dart lines 597-612, 8) Add proper loading states while GPS data is being fetched using Skeletonizer as shown in home_screen.dart line 799, 9) Handle error states for map loading failures and missing GPS data with proper error widgets, 10) Maintain the existing UI structure with location stats container and horizontal location list while only replacing the map placeholder area. Use MapController for programmatic map control and ensure proper disposal in widget lifecycle.

# Test Strategy:
Verify that the placeholder Container is completely replaced with an interactive FlutterMap widget displaying OpenStreetMap tiles. Test that real GPS location points from LocationDatabase are displayed as polylines connecting consecutive points with proper theme colors. Verify map controls work: zoom in/out buttons adjust map zoom level and center on current location button moves map to user's current position. Confirm that tapping location cards in the horizontal list centers the map on the selected location coordinates. Test that distance calculations use real GPS coordinates instead of mock data. Validate proper loading states with Skeletonizer while location data is being fetched and error handling displays appropriate error widgets for map loading failures or missing GPS data scenarios. Ensure MapController is properly initialized and disposed to prevent memory leaks.

# Subtasks:
## 1. Replace placeholder Container with FlutterMap widget and TileLayer [done]
### Dependencies: None
### Description: Replace the mock Container (lines 100-133) with FlutterMap widget, MapOptions, and OpenStreetMap TileLayer following the pattern from home_screen.dart
### Details:


## 2. Integrate LocationDatabase to display real GPS points as polylines [done]
### Dependencies: None
### Description: Connect to locationDatabaseProvider to fetch LocationPoints for selected date and display them as connected polylines using PolylineLayer
### Details:


## 3. Add MarkerLayer with activity-based markers [done]
### Dependencies: None
### Description: Implement start/end markers with custom icons (green play, red stop) and consider activity-type markers for walking/driving/stationary points
### Details:


## 4. Implement map controls with MapController [done]
### Dependencies: None
### Description: Replace TODO items (lines 144-155, 158-163) with working zoom in/out and center on current location functionality using MapController.move()
### Details:


## 5. Add location card tap handler for map centering [done]
### Dependencies: None
### Description: Update location card tap handler to center map on selected location coordinates using MapController
### Details:


## 6. Integrate real distance calculation using Haversine formula [done]
### Dependencies: None
### Description: Replace mock distance calculation with real GPS-based distance using the Haversine formula implementation from home_screen.dart
### Details:


## 7. Add loading and error state handling [done]
### Dependencies: None
### Description: Implement Skeletonizer for loading states and proper error widgets for map loading failures or missing GPS data
### Details:


